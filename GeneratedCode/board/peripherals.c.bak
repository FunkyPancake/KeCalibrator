/***********************************************************************************************************************
 * This file was generated by the MCUXpresso Config Tools. Any manual edits made to this file
 * will be overwritten if the respective MCUXpresso Config Tools is used to update this file.
 **********************************************************************************************************************/

/* clang-format off */
/* TEXT BELOW IS USED AS SETTING FOR TOOLS *************************************
!!GlobalInfo
product: Peripherals v13.0
processor: MKE18F512xxx16
package_id: MKE18F512VLH16
mcu_data: ksdk2_0
processor_version: 13.0.1
functionalGroups:
- name: BOARD_InitPeripherals
  UUID: 07f5b299-ddc0-4be9-99fd-d197ad5ead68
  called_from_default_init: true
  selectedCore: core0
 * BE CAREFUL MODIFYING THIS COMMENT - IT IS YAML SETTINGS FOR TOOLS **********/

/* TEXT BELOW IS USED AS SETTING FOR TOOLS *************************************
component:
- type: 'system'
- type_id: 'system_54b53072540eeeb8f8e9343e71f28176'
- global_system_definitions:
  - user_definitions: ''
  - user_includes: ''
 * BE CAREFUL MODIFYING THIS COMMENT - IT IS YAML SETTINGS FOR TOOLS **********/

/* TEXT BELOW IS USED AS SETTING FOR TOOLS *************************************
component:
- type: 'uart_cmsis_common'
- type_id: 'uart_cmsis_common_9cb8e302497aa696fdbb5a4fd622c2a8'
- global_USART_CMSIS_common:
  - quick_selection: 'default'
 * BE CAREFUL MODIFYING THIS COMMENT - IT IS YAML SETTINGS FOR TOOLS **********/

/* TEXT BELOW IS USED AS SETTING FOR TOOLS *************************************
component:
- type: 'gpio_adapter_common'
- type_id: 'gpio_adapter_common_57579b9ac814fe26bf95df0a384c36b6'
- global_gpio_adapter_common:
  - quick_selection: 'default'
 * BE CAREFUL MODIFYING THIS COMMENT - IT IS YAML SETTINGS FOR TOOLS **********/
/* clang-format on */

/***********************************************************************************************************************
 * Included files
 **********************************************************************************************************************/
#include "peripherals.h"

/***********************************************************************************************************************
 * BOARD_InitPeripherals functional group
 **********************************************************************************************************************/
/***********************************************************************************************************************
 * DMA initialization code
 **********************************************************************************************************************/
/* clang-format off */
/* TEXT BELOW IS USED AS SETTING FOR TOOLS *************************************
instance:
- name: 'DMA'
- type: 'edma'
- mode: 'basic'
- custom_name_enabled: 'false'
- type_id: 'edma_6d0dd4e17e2f179c7d42d98767129ede'
- functional_group: 'BOARD_InitPeripherals'
- peripheral: 'DMA'
- config_sets:
  - fsl_edma:
    - common_settings:
      - enableContinuousLinkMode: 'true'
      - enableHaltOnError: 'true'
      - enableRoundRobinArbitration: 'false'
      - enableDebugMode: 'false'
    - dma_table:
      - 0: []
    - edma_channels:
      - 0:
        - apiMode: 'nontransTCD'
        - edma_channel:
          - channel_prefix_id: 'CH0'
          - uid: '1700813172620'
          - eDMAn: '0'
          - eDMA_source: 'kDmaRequestMux0FTM0Channel1'
          - enableTriggerInput: 'false'
          - init_channel_priority: 'false'
          - edma_channel_Preemption:
            - enableChannelPreemption: 'false'
            - enablePreemptAbility: 'false'
            - channelPriority: '0'
        - resetChannel: 'true'
        - enableChannelRequest: 'false'
        - enableAsyncRequest: 'false'
        - tcd_configuration: []
        - constantTCD: 'true'
        - initializedTCD: '0'
        - irqSources: ''
        - init_interruptsEnable: 'false'
        - interrupt_channel:
          - IRQn: 'DMA0_IRQn'
          - enable_interrrupt: 'enabled'
          - enable_priority: 'false'
          - priority: '0'
          - enable_custom_name: 'false'
    - errInterruptConfig:
      - enableErrInterrupt: 'false'
      - errorInterrupt:
        - IRQn: 'DMA_Error_IRQn'
        - enable_interrrupt: 'enabled'
        - enable_priority: 'false'
        - priority: '0'
        - enable_custom_name: 'false'
 * BE CAREFUL MODIFYING THIS COMMENT - IT IS YAML SETTINGS FOR TOOLS **********/
/* clang-format on */
const edma_config_t DMA_config = {
  .enableContinuousLinkMode = true,
  .enableHaltOnError = true,
  .enableRoundRobinArbitration = false,
  .enableDebugMode = false
};

static void DMA_init(void) {

  /* Channel CH0 initialization */
  /* Set the source kDmaRequestMux0FTM0Channel1 request in the DMAMUX */
  DMAMUX_SetSource(DMA_DMAMUX_BASEADDR, DMA_CH0_DMA_CHANNEL, DMA_CH0_DMA_REQUEST);
  /* Enable the channel 0 in the DMAMUX */
  DMAMUX_EnableChannel(DMA_DMAMUX_BASEADDR, DMA_CH0_DMA_CHANNEL);
  /* DMA channel 0 reset */
  EDMA_ResetChannel(DMA_DMA_BASEADDR, DMA_CH0_DMA_CHANNEL);
}

/***********************************************************************************************************************
 * NVIC initialization code
 **********************************************************************************************************************/
/* clang-format off */
/* TEXT BELOW IS USED AS SETTING FOR TOOLS *************************************
instance:
- name: 'NVIC'
- type: 'nvic'
- mode: 'general'
- custom_name_enabled: 'false'
- type_id: 'nvic_57b5eef3774cc60acaede6f5b8bddc67'
- functional_group: 'BOARD_InitPeripherals'
- peripheral: 'NVIC'
- config_sets:
  - nvic:
    - interrupt_table:
      - 0: []
      - 1: []
      - 2: []
      - 3: []
    - interrupts:
      - 0:
        - channelId: 'PDB1_IRQn'
        - interrupt_t:
          - IRQn: 'PDB1_IRQn'
          - enable_interrrupt: 'enabled'
          - enable_priority: 'true'
          - priority: '2'
          - enable_custom_name: 'false'
 * BE CAREFUL MODIFYING THIS COMMENT - IT IS YAML SETTINGS FOR TOOLS **********/
/* clang-format on */

/* Empty initialization function (commented out)
static void NVIC_init(void) {
} */

/***********************************************************************************************************************
 * CAN0 initialization code
 **********************************************************************************************************************/
/* clang-format off */
/* TEXT BELOW IS USED AS SETTING FOR TOOLS *************************************
instance:
- name: 'CAN0'
- type: 'flexcan'
- mode: 'interrupts'
- custom_name_enabled: 'false'
- type_id: 'flexcan_477f6be3462ee2961b67c0825ef495e2'
- functional_group: 'BOARD_InitPeripherals'
- peripheral: 'CAN0'
- config_sets:
  - interruptsCfg:
    - messageBufferIrqs: '0'
    - interruptsEnable: ''
    - enable_ored_mb_irq: 'false'
    - interrupt_ored_mb:
      - IRQn: 'CAN0_ORed_Message_buffer_IRQn'
      - enable_interrrupt: 'enabled'
      - enable_priority: 'true'
      - priority: '1'
      - enable_custom_name: 'false'
    - enable_busoff_irq: 'false'
    - interrupt_busoff:
      - IRQn: 'CAN0_ORed_IRQn'
      - enable_interrrupt: 'enabled'
      - enable_priority: 'false'
      - priority: '0'
      - enable_custom_name: 'false'
    - enable_error_irq: 'false'
    - interrupt_error:
      - IRQn: 'CAN0_Error_IRQn'
      - enable_interrrupt: 'enabled'
      - enable_priority: 'false'
      - priority: '0'
      - enable_custom_name: 'false'
    - enable_tx_irq: 'false'
    - interrupt_tx:
      - IRQn: 'CAN0_ORed_IRQn'
      - enable_interrrupt: 'enabled'
      - enable_priority: 'false'
      - priority: '0'
      - enable_custom_name: 'false'
    - enable_rx_irq: 'false'
    - interrupt_rx:
      - IRQn: 'CAN0_ORed_IRQn'
      - enable_interrrupt: 'enabled'
      - enable_priority: 'false'
      - priority: '0'
      - enable_custom_name: 'false'
    - enable_wakeup_irq: 'false'
    - interrupt_wakeup:
      - IRQn: 'CAN0_Wake_Up_IRQn'
      - enable_interrrupt: 'enabled'
      - enable_priority: 'false'
      - priority: '0'
      - enable_custom_name: 'false'
  - fsl_flexcan:
    - can_config:
      - clockSource: 'kFLEXCAN_ClkSrcPeri'
      - clockSourceFreq: 'BOARD_BootClockRUN'
      - wakeupSrc: 'kFLEXCAN_WakeupSrcUnfiltered'
      - baudRate: '500000'
      - maxMbNum: '16'
      - enableLoopBack: 'false'
      - enableTimerSync: 'true'
      - enableSelfWakeup: 'false'
      - enableIndividMask: 'false'
      - disableSelfReception: 'false'
      - enableListenOnlyMode: 'false'
      - timingConfig:
        - propSeg: '7'
        - phaseSeg1: '4'
        - phaseSeg2: '2'
        - rJumpwidth: '2'
        - bitTime: []
    - enableRxFIFO: 'false'
    - rxFIFO:
      - idFilterTable: ''
      - idFilterNum: 'num0'
      - idFilterType: 'kFLEXCAN_RxFifoFilterTypeA'
      - priority: 'kFLEXCAN_RxFifoPrioLow'
    - channels:
      - 0:
        - mbID: '0'
        - mbType: 'mbRx'
        - rxMb:
          - id: '0'
          - format: 'kFLEXCAN_FrameFormatStandard'
          - type: 'kFLEXCAN_FrameTypeData'
      - 1:
        - mbID: '1'
        - mbType: 'mbTx'
        - rxMb:
          - id: '0'
          - format: 'kFLEXCAN_FrameFormatStandard'
          - type: 'kFLEXCAN_FrameTypeData'
 * BE CAREFUL MODIFYING THIS COMMENT - IT IS YAML SETTINGS FOR TOOLS **********/
/* clang-format on */
const flexcan_config_t CAN0_config = {
  .clkSrc = kFLEXCAN_ClkSrc1,
  .wakeupSrc = kFLEXCAN_WakeupSrcUnfiltered,
  .baudRate = 500000UL,
  .maxMbNum = 16U,
  .enableLoopBack = false,
  .enableTimerSync = true,
  .enableSelfWakeup = false,
  .enableIndividMask = false,
  .disableSelfReception = false,
  .enableListenOnlyMode = false,
  .timingConfig = {
    .preDivider = 11,
    .propSeg = 6,
    .phaseSeg1 = 3,
    .phaseSeg2 = 1,
    .rJumpwidth = 1
  }
};
/* Message buffer 0 configuration structure */
const flexcan_rx_mb_config_t CAN0_rx_mb_config_0 = {
  .id = FLEXCAN_ID_STD(0UL),
  .format = kFLEXCAN_FrameFormatStandard,
  .type = kFLEXCAN_FrameTypeData
};

static void CAN0_init(void) {
  FLEXCAN_Init(CAN0_PERIPHERAL, &CAN0_config, CAN0_CLOCK_SOURCE);

  /* Message buffer 0 initialization */
  FLEXCAN_SetRxMbConfig(CAN0_PERIPHERAL, 0, &CAN0_rx_mb_config_0, true);
  /* Message buffer 1 initialization */
  FLEXCAN_SetTxMbConfig(CAN0_PERIPHERAL, 1, true);
}

/***********************************************************************************************************************
 * LPSPI0 initialization code
 **********************************************************************************************************************/
/* clang-format off */
/* TEXT BELOW IS USED AS SETTING FOR TOOLS *************************************
instance:
- name: 'LPSPI0'
- type: 'lpspi'
- mode: 'freertos'
- custom_name_enabled: 'false'
- type_id: 'lpspi_6e21a1e0a09f0a012d683c4f91752db8'
- functional_group: 'BOARD_InitPeripherals'
- peripheral: 'LPSPI0'
- config_sets:
  - transfer:
    - config:
      - transmitBuffer:
        - init: 'false'
      - receiveBuffer:
        - init: 'false'
      - dataSize: '10'
      - enableTransferStruct: 'noInit'
      - flags: ''
  - main:
    - mode: 'kLPSPI_Master'
    - clockSource: 'LpspiClock'
    - clockSourceFreq: 'BOARD_BootClockRUN'
    - master:
      - baudRate: '2000000'
      - bitsPerFrame: '16'
      - cpol: 'kLPSPI_ClockPolarityActiveHigh'
      - cpha: 'kLPSPI_ClockPhaseSecondEdge'
      - direction: 'kLPSPI_MsbFirst'
      - pcsToSckDelayInNanoSec: '1000'
      - lastSckToPcsDelayInNanoSec: '1000'
      - betweenTransferDelayInNanoSec: '1000'
      - whichPcs: 'kLPSPI_Pcs0'
      - pcsActiveHighOrLow: 'kLPSPI_PcsActiveLow'
      - pinCfg: 'kLPSPI_SdiInSdoOut'
      - dataOutConfig: 'kLpspiDataOutRetained'
    - allPcsPolarityEnable: 'false'
    - allPcsPolarity:
      - kLPSPI_Pcs1Active: 'kLPSPI_PcsActiveLow'
      - kLPSPI_Pcs2Active: 'kLPSPI_PcsActiveLow'
      - kLPSPI_Pcs3Active: 'kLPSPI_PcsActiveLow'
    - interrupt_priority:
      - IRQn: 'LPSPI0_IRQn'
      - enable_priority: 'true'
      - priority: '5'
 * BE CAREFUL MODIFYING THIS COMMENT - IT IS YAML SETTINGS FOR TOOLS **********/
/* clang-format on */
const lpspi_master_config_t LPSPI0_config = {
  .baudRate = 2000000UL,
  .bitsPerFrame = 16UL,
  .cpol = kLPSPI_ClockPolarityActiveHigh,
  .cpha = kLPSPI_ClockPhaseSecondEdge,
  .direction = kLPSPI_MsbFirst,
  .pcsToSckDelayInNanoSec = 1000UL,
  .lastSckToPcsDelayInNanoSec = 1000UL,
  .betweenTransferDelayInNanoSec = 1000UL,
  .whichPcs = kLPSPI_Pcs0,
  .pcsActiveHighOrLow = kLPSPI_PcsActiveLow,
  .pinCfg = kLPSPI_SdiInSdoOut,
  .dataOutConfig = kLpspiDataOutRetained
};
lpspi_rtos_handle_t LPSPI0_handle;

static void LPSPI0_init(void) {
  /* Interrupt vector LPSPI0_IRQn priority settings in the NVIC. */
  NVIC_SetPriority(LPSPI0_IRQN, LPSPI0_IRQ_PRIORITY);
  LPSPI_RTOS_Init(&LPSPI0_handle, LPSPI0_PERIPHERAL, &LPSPI0_config, LPSPI0_CLOCK_FREQ);
}

/***********************************************************************************************************************
 * FTM3 initialization code
 **********************************************************************************************************************/
/* clang-format off */
/* TEXT BELOW IS USED AS SETTING FOR TOOLS *************************************
instance:
- name: 'FTM3'
- type: 'ftm'
- mode: 'CenterAligned'
- custom_name_enabled: 'false'
- type_id: 'ftm_cf73470dab578a761c1bb272554a7d11'
- functional_group: 'BOARD_InitPeripherals'
- peripheral: 'FTM3'
- config_sets:
  - ftm_main_config:
    - ftm_config:
      - clockSource: 'kFTM_FixedClock'
      - clockSourceFreq: 'ClocksTool_DefaultInit'
      - timerPrescaler: '1'
      - timerOutputFrequency: '10kHz'
      - systemClockSource: 'BusInterfaceClock'
      - systemClockSourceFreq: 'ClocksTool_DefaultInit'
      - faultMode: 'kFTM_Fault_Disable'
      - inputFilterPeriod: '1'
      - faultInputs:
        - 0:
          - enableFaultInput: 'false'
          - faultLevelVal: 'low'
          - useFaultFilter: 'false'
        - 1:
          - enableFaultInput: 'false'
          - faultLevelVal: 'low'
          - useFaultFilter: 'false'
        - 2:
          - enableFaultInput: 'false'
          - faultLevelVal: 'low'
          - useFaultFilter: 'false'
        - 3:
          - enableFaultInput: 'false'
          - faultLevelVal: 'low'
          - useFaultFilter: 'false'
      - deadTimePrescale: 'kFTM_Deadtime_Prescale_1'
      - deadTimePeriod: '1'
      - pwmSyncMode: 'kFTM_SoftwareTrigger'
      - reloadPoints: 'kFTM_CntMax'
      - extTriggers: 'kFTM_InitTrigger'
      - chnlInitState: ''
      - chnlPolarity: ''
      - bdmMode: 'kFTM_BdmMode_3'
      - useGlobalTimeBase: 'false'
    - timer_interrupts: ''
    - enable_irq: 'false'
    - ftm_interrupt:
      - IRQn: 'FTM3_IRQn'
      - enable_interrrupt: 'enabled'
      - enable_priority: 'true'
      - priority: '1'
      - enable_custom_name: 'false'
    - EnableTimerInInit: 'false'
  - ftm_center_aligned_mode:
    - ftm_center_aligned_channels_config:
      - 0:
        - channelId: 'PHASE_V'
        - chnlNumber: 'kFTM_Chnl_2'
        - level: 'kFTM_HighTrue'
        - dutyValueStr: '0'
        - enable_chan_irq: 'false'
      - 1:
        - channelId: 'PHASE_W'
        - chnlNumber: 'kFTM_Chnl_3'
        - level: 'kFTM_HighTrue'
        - dutyValueStr: '0'
        - enable_chan_irq: 'false'
      - 2:
        - channelId: 'PHASE_U'
        - chnlNumber: 'kFTM_Chnl_7'
        - level: 'kFTM_HighTrue'
        - dutyValueStr: '0'
        - enable_chan_irq: 'false'
 * BE CAREFUL MODIFYING THIS COMMENT - IT IS YAML SETTINGS FOR TOOLS **********/
/* clang-format on */
const ftm_config_t FTM3_config = {
  .prescale = kFTM_Prescale_Divide_1,
  .faultMode = kFTM_Fault_Disable,
  .faultFilterValue = 0,
  .deadTimePrescale = kFTM_Deadtime_Prescale_1,
  .deadTimeValue = 1,
  .pwmSyncMode = kFTM_SoftwareTrigger,
  .reloadPoints = kFTM_CntMax,
  .extTriggers = kFTM_InitTrigger,
  .chnlInitState = 0,
  .chnlPolarity = 0,
  .bdmMode = kFTM_BdmMode_3,
  .useGlobalTimeBase = false
};
const ftm_chnl_pwm_config_param_t FTM3_centerPwmSignalParams[] = { 
  {
    .chnlNumber = kFTM_Chnl_2,
    .level = kFTM_HighTrue,
    .dutyValue = 0,
  },
  {
    .chnlNumber = kFTM_Chnl_3,
    .level = kFTM_HighTrue,
    .dutyValue = 0,
  },
  {
    .chnlNumber = kFTM_Chnl_7,
    .level = kFTM_HighTrue,
    .dutyValue = 0,
  }
};

static void FTM3_init(void) {
  FTM_Init(FTM3_PERIPHERAL, &FTM3_config);
  FTM_SetTimerPeriod(FTM3_PERIPHERAL, FTM3_TIMER_MODULO_VALUE);
  FTM_SetupPwmMode(FTM3_PERIPHERAL, FTM3_centerPwmSignalParams, sizeof(FTM3_centerPwmSignalParams) / sizeof(ftm_chnl_pwm_config_param_t), kFTM_CenterAlignedPwm);
}

/***********************************************************************************************************************
 * CAN1 initialization code
 **********************************************************************************************************************/
/* clang-format off */
/* TEXT BELOW IS USED AS SETTING FOR TOOLS *************************************
instance:
- name: 'CAN1'
- type: 'flexcan'
- mode: 'interrupts'
- custom_name_enabled: 'false'
- type_id: 'flexcan_477f6be3462ee2961b67c0825ef495e2'
- functional_group: 'BOARD_InitPeripherals'
- peripheral: 'CAN1'
- config_sets:
  - interruptsCfg:
    - messageBufferIrqs: '0'
    - interruptsEnable: ''
    - enable_ored_mb_irq: 'false'
    - interrupt_ored_mb:
      - IRQn: 'CAN1_ORed_Message_buffer_IRQn'
      - enable_interrrupt: 'enabled'
      - enable_priority: 'true'
      - priority: '1'
      - enable_custom_name: 'false'
    - enable_busoff_irq: 'false'
    - interrupt_busoff:
      - IRQn: 'CAN1_ORed_IRQn'
      - enable_interrrupt: 'enabled'
      - enable_priority: 'false'
      - priority: '0'
      - enable_custom_name: 'false'
    - enable_error_irq: 'false'
    - interrupt_error:
      - IRQn: 'CAN1_Error_IRQn'
      - enable_interrrupt: 'enabled'
      - enable_priority: 'false'
      - priority: '0'
      - enable_custom_name: 'false'
    - enable_tx_irq: 'false'
    - interrupt_tx:
      - IRQn: 'CAN1_ORed_IRQn'
      - enable_interrrupt: 'enabled'
      - enable_priority: 'false'
      - priority: '0'
      - enable_custom_name: 'false'
    - enable_rx_irq: 'false'
    - interrupt_rx:
      - IRQn: 'CAN1_ORed_IRQn'
      - enable_interrrupt: 'enabled'
      - enable_priority: 'false'
      - priority: '0'
      - enable_custom_name: 'false'
    - enable_wakeup_irq: 'false'
    - interrupt_wakeup:
      - IRQn: 'CAN1_Wake_Up_IRQn'
      - enable_interrrupt: 'enabled'
      - enable_priority: 'false'
      - priority: '0'
      - enable_custom_name: 'false'
  - fsl_flexcan:
    - can_config:
      - clockSource: 'kFLEXCAN_ClkSrcPeri'
      - clockSourceFreq: 'BOARD_BootClockRUN'
      - wakeupSrc: 'kFLEXCAN_WakeupSrcUnfiltered'
      - baudRate: '500000'
      - maxMbNum: '16'
      - enableLoopBack: 'false'
      - enableTimerSync: 'true'
      - enableSelfWakeup: 'false'
      - enableIndividMask: 'false'
      - disableSelfReception: 'false'
      - enableListenOnlyMode: 'false'
      - timingConfig:
        - propSeg: '7'
        - phaseSeg1: '4'
        - phaseSeg2: '2'
        - rJumpwidth: '2'
        - bitTime: []
    - enableRxFIFO: 'false'
    - rxFIFO:
      - idFilterTable: ''
      - idFilterNum: 'num0'
      - idFilterType: 'kFLEXCAN_RxFifoFilterTypeA'
      - priority: 'kFLEXCAN_RxFifoPrioLow'
    - channels:
      - 0:
        - mbID: '0'
        - mbType: 'mbRx'
        - rxMb:
          - id: '0'
          - format: 'kFLEXCAN_FrameFormatStandard'
          - type: 'kFLEXCAN_FrameTypeData'
      - 1:
        - mbID: '1'
        - mbType: 'mbTx'
        - rxMb:
          - id: '0'
          - format: 'kFLEXCAN_FrameFormatStandard'
          - type: 'kFLEXCAN_FrameTypeData'
 * BE CAREFUL MODIFYING THIS COMMENT - IT IS YAML SETTINGS FOR TOOLS **********/
/* clang-format on */
const flexcan_config_t CAN1_config = {
  .clkSrc = kFLEXCAN_ClkSrc1,
  .wakeupSrc = kFLEXCAN_WakeupSrcUnfiltered,
  .baudRate = 500000UL,
  .maxMbNum = 16U,
  .enableLoopBack = false,
  .enableTimerSync = true,
  .enableSelfWakeup = false,
  .enableIndividMask = false,
  .disableSelfReception = false,
  .enableListenOnlyMode = false,
  .timingConfig = {
    .preDivider = 11,
    .propSeg = 6,
    .phaseSeg1 = 3,
    .phaseSeg2 = 1,
    .rJumpwidth = 1
  }
};
/* Message buffer 0 configuration structure */
const flexcan_rx_mb_config_t CAN1_rx_mb_config_0 = {
  .id = FLEXCAN_ID_STD(0UL),
  .format = kFLEXCAN_FrameFormatStandard,
  .type = kFLEXCAN_FrameTypeData
};

static void CAN1_init(void) {
  FLEXCAN_Init(CAN1_PERIPHERAL, &CAN1_config, CAN1_CLOCK_SOURCE);

  /* Message buffer 0 initialization */
  FLEXCAN_SetRxMbConfig(CAN1_PERIPHERAL, 0, &CAN1_rx_mb_config_0, true);
  /* Message buffer 1 initialization */
  FLEXCAN_SetTxMbConfig(CAN1_PERIPHERAL, 1, true);
}

/***********************************************************************************************************************
 * FTM2 initialization code
 **********************************************************************************************************************/
/* clang-format off */
/* TEXT BELOW IS USED AS SETTING FOR TOOLS *************************************
instance:
- name: 'FTM2'
- type: 'ftm'
- mode: 'QuadratureDecoder'
- custom_name_enabled: 'false'
- type_id: 'ftm_cf73470dab578a761c1bb272554a7d11'
- functional_group: 'BOARD_InitPeripherals'
- peripheral: 'FTM2'
- config_sets:
  - ftm_main_config:
    - ftm_config:
      - clockSource: 'kFTM_FixedClock'
      - clockSourceFreq: 'BOARD_BootClockRUN'
      - timerPrescaler: '1'
      - systemClockSource: 'BusInterfaceClock'
      - systemClockSourceFreq: 'BOARD_BootClockRUN'
      - faultMode: 'kFTM_Fault_Disable'
      - inputFilterPeriod: '1'
      - faultInputs:
        - 0:
          - enableFaultInput: 'false'
          - faultLevelVal: 'low'
          - useFaultFilter: 'false'
        - 1:
          - enableFaultInput: 'false'
          - faultLevelVal: 'low'
          - useFaultFilter: 'false'
        - 2:
          - enableFaultInput: 'false'
          - faultLevelVal: 'low'
          - useFaultFilter: 'false'
        - 3:
          - enableFaultInput: 'false'
          - faultLevelVal: 'low'
          - useFaultFilter: 'false'
      - deadTimePrescale: 'kFTM_Deadtime_Prescale_1'
      - deadTimePeriod: '0'
      - pwmSyncMode: 'kFTM_SoftwareTrigger'
      - reloadPoints: ''
      - extTriggers: ''
      - chnlInitState: ''
      - chnlPolarity: ''
      - bdmMode: 'kFTM_BdmMode_0'
      - useGlobalTimeBase: 'false'
    - timer_interrupts: ''
    - enable_irq: 'false'
    - ftm_interrupt:
      - IRQn: 'FTM0_IRQn'
      - enable_interrrupt: 'enabled'
      - enable_priority: 'false'
      - priority: '0'
      - enable_custom_name: 'false'
    - EnableTimerInInit: 'true'
  - ftm_quadrature_decoder_mode:
    - timerModuloVal: '0xFFFF'
    - timerInitVal: '0'
    - ftm_quad_decoder_mode: 'kFTM_QuadPhaseEncode'
    - ftm_phase_a_params:
      - enablePhaseFilter: 'true'
      - phaseFilterPeriod: '1'
      - phasePolarity: 'kFTM_QuadPhaseNormal'
    - ftm_phase_b_params:
      - enablePhaseFilter: 'true'
      - phaseFilterPeriod: '1'
      - phasePolarity: 'kFTM_QuadPhaseNormal'
 * BE CAREFUL MODIFYING THIS COMMENT - IT IS YAML SETTINGS FOR TOOLS **********/
/* clang-format on */
const ftm_config_t FTM2_config = {
  .prescale = kFTM_Prescale_Divide_1,
  .faultMode = kFTM_Fault_Disable,
  .faultFilterValue = 0,
  .deadTimePrescale = kFTM_Deadtime_Prescale_1,
  .deadTimeValue = 0,
  .pwmSyncMode = kFTM_SoftwareTrigger,
  .reloadPoints = 0,
  .extTriggers = 0,
  .chnlInitState = 0,
  .chnlPolarity = 0,
  .bdmMode = kFTM_BdmMode_0,
  .useGlobalTimeBase = false
};
const ftm_phase_params_t FTM2_phaseAParams = { 
  .enablePhaseFilter = true,
  .phaseFilterVal = 0,
  .phasePolarity = kFTM_QuadPhaseNormal

};
const ftm_phase_params_t FTM2_phaseBParams = { 
  .enablePhaseFilter = true,
  .phaseFilterVal = 0,
  .phasePolarity = kFTM_QuadPhaseNormal

};

static void FTM2_init(void) {
  FTM_Init(FTM2_PERIPHERAL, &FTM2_config);
/* Initialization of the timer initial value and modulo value */
  FTM_SetQuadDecoderModuloValue(FTM2_PERIPHERAL, 0,65535);
  FTM_SetupQuadDecode(FTM2_PERIPHERAL, &FTM2_phaseAParams, &FTM2_phaseBParams, kFTM_QuadPhaseEncode);
  FTM_StartTimer(FTM2_PERIPHERAL, kFTM_FixedClock);
}

/***********************************************************************************************************************
 * ADC1 initialization code
 **********************************************************************************************************************/
/* clang-format off */
/* TEXT BELOW IS USED AS SETTING FOR TOOLS *************************************
instance:
- name: 'ADC1'
- type: 'adc12'
- mode: 'ADC12'
- custom_name_enabled: 'false'
- type_id: 'adc12_5324d28dd0212c08055a9d9cd4317082'
- functional_group: 'BOARD_InitPeripherals'
- peripheral: 'ADC1'
- config_sets:
  - fsl_adc12:
    - enable_irq: 'true'
    - adc_interrupt:
      - IRQn: 'ADC1_IRQn'
      - enable_interrrupt: 'enabled'
      - enable_priority: 'true'
      - priority: '3'
      - enable_custom_name: 'false'
    - adc12_config:
      - referenceVoltageSource: 'kADC12_ReferenceVoltageSourceVref'
      - clockSource: 'kADC12_ClockSourceAlt0'
      - clockSourceFreq: 'ClocksTool_DefaultInit'
      - clockDivider: 'kADC12_ClockDivider1'
      - resolution: 'kADC12_Resolution12Bit'
      - sampleClockCount: '20'
      - enableContinuousConversion: 'false'
    - adc12HardwareCompareConfig:
      - hardwareCompareModeEnable: 'false'
    - adc12_hardware_average_mode: 'kADC12_HardwareAverageCount4'
    - hardwareTrigger: 'true'
    - enableDMA: 'false'
    - doAutoCalibration: 'true'
    - offset: '0'
    - gain: '0'
    - adc12_channels_config:
      - 0:
        - channelName: ''
        - channelNumber: 'SE.10'
        - enableInterruptOnConversionCompleted: 'true'
 * BE CAREFUL MODIFYING THIS COMMENT - IT IS YAML SETTINGS FOR TOOLS **********/
/* clang-format on */
const adc12_config_t ADC1_config = {
  .referenceVoltageSource = kADC12_ReferenceVoltageSourceVref,
  .clockSource = kADC12_ClockSourceAlt0,
  .clockDivider = kADC12_ClockDivider1,
  .resolution = kADC12_Resolution12Bit,
  .sampleClockCount = 20UL,
  .enableContinuousConversion = false
};
adc12_channel_config_t ADC1_channelsConfig[1] = {
  {
    .channelNumber = 10U,
    .enableInterruptOnConversionCompleted = true
  }
};
const adc12_hardware_average_mode_t ADC1_hardwareAverageConfig = kADC12_HardwareAverageCount4;

static void ADC1_init(void) {
  /* Initialize ADC12 converter */
  ADC12_Init(ADC1_PERIPHERAL, &ADC1_config);
  /* Set to hardware trigger mode */
  ADC12_EnableHardwareTrigger(ADC1_PERIPHERAL, true);
  /* Configure hardware average mode */
  ADC12_SetHardwareAverage(ADC1_PERIPHERAL, ADC1_hardwareAverageConfig);
  /* Set the offset value for the conversion result */
  ADC12_SetOffsetValue(ADC1_PERIPHERAL, (uint32_t) 0);
  /* Set the gain value for the conversion result */
  ADC12_SetGainValue(ADC1_PERIPHERAL, 0);
  /* Perform auto calibration */
  ADC12_DoAutoCalibration(ADC1_PERIPHERAL);
  /* Enable generating the DMA trigger when conversion is completed */
  ADC12_EnableDMA(ADC1_PERIPHERAL, false);
  /* Interrupt vector ADC1_IRQn priority settings in the NVIC. */
  NVIC_SetPriority(ADC1_IRQN, ADC1_IRQ_PRIORITY);
  /* Enable interrupt ADC1_IRQn request in the NVIC. */
  EnableIRQ(ADC1_IRQN);
}

/***********************************************************************************************************************
 * LPSPI1 initialization code
 **********************************************************************************************************************/
/* clang-format off */
/* TEXT BELOW IS USED AS SETTING FOR TOOLS *************************************
instance:
- name: 'LPSPI1'
- type: 'lpspi'
- mode: 'freertos'
- custom_name_enabled: 'false'
- type_id: 'lpspi_6e21a1e0a09f0a012d683c4f91752db8'
- functional_group: 'BOARD_InitPeripherals'
- peripheral: 'LPSPI1'
- config_sets:
  - transfer:
    - config:
      - transmitBuffer:
        - init: 'false'
      - receiveBuffer:
        - init: 'false'
      - dataSize: '4'
      - enableTransferStruct: 'noInit'
      - flags: ''
  - main:
    - mode: 'kLPSPI_Master'
    - clockSource: 'LpspiClock'
    - clockSourceFreq: 'GetIpFreq'
    - master:
      - baudRate: '5000000'
      - bitsPerFrame: '32'
      - cpol: 'kLPSPI_ClockPolarityActiveHigh'
      - cpha: 'kLPSPI_ClockPhaseSecondEdge'
      - direction: 'kLPSPI_LsbFirst'
      - pcsToSckDelayInNanoSec: '1000'
      - lastSckToPcsDelayInNanoSec: '1000'
      - betweenTransferDelayInNanoSec: '1000'
      - whichPcs: 'kLPSPI_Pcs0'
      - pcsActiveHighOrLow: 'kLPSPI_PcsActiveLow'
      - pinCfg: 'kLPSPI_SdiInSdoOut'
      - dataOutConfig: 'kLpspiDataOutRetained'
    - allPcsPolarityEnable: 'false'
    - allPcsPolarity:
      - kLPSPI_Pcs1Active: 'kLPSPI_PcsActiveLow'
      - kLPSPI_Pcs2Active: 'kLPSPI_PcsActiveLow'
      - kLPSPI_Pcs3Active: 'kLPSPI_PcsActiveLow'
    - interrupt_priority:
      - IRQn: 'LPSPI1_IRQn'
      - enable_priority: 'true'
      - priority: '2'
 * BE CAREFUL MODIFYING THIS COMMENT - IT IS YAML SETTINGS FOR TOOLS **********/
/* clang-format on */
const lpspi_master_config_t LPSPI1_config = {
  .baudRate = 5000000UL,
  .bitsPerFrame = 32UL,
  .cpol = kLPSPI_ClockPolarityActiveHigh,
  .cpha = kLPSPI_ClockPhaseSecondEdge,
  .direction = kLPSPI_LsbFirst,
  .pcsToSckDelayInNanoSec = 1000UL,
  .lastSckToPcsDelayInNanoSec = 1000UL,
  .betweenTransferDelayInNanoSec = 1000UL,
  .whichPcs = kLPSPI_Pcs0,
  .pcsActiveHighOrLow = kLPSPI_PcsActiveLow,
  .pinCfg = kLPSPI_SdiInSdoOut,
  .dataOutConfig = kLpspiDataOutRetained
};
lpspi_rtos_handle_t LPSPI1_handle;

static void LPSPI1_init(void) {
  /* Interrupt vector LPSPI1_IRQn priority settings in the NVIC. */
  NVIC_SetPriority(LPSPI1_IRQN, LPSPI1_IRQ_PRIORITY);
  LPSPI_RTOS_Init(&LPSPI1_handle, LPSPI1_PERIPHERAL, &LPSPI1_config, LPSPI1_CLOCK_FREQ);
}

/***********************************************************************************************************************
 * FTM0 initialization code
 **********************************************************************************************************************/
/* clang-format off */
/* TEXT BELOW IS USED AS SETTING FOR TOOLS *************************************
instance:
- name: 'FTM0'
- type: 'ftm'
- mode: 'EdgeAligned'
- custom_name_enabled: 'false'
- type_id: 'ftm_cf73470dab578a761c1bb272554a7d11'
- functional_group: 'BOARD_InitPeripherals'
- peripheral: 'FTM0'
- config_sets:
  - ftm_main_config:
    - ftm_config:
      - clockSource: 'kFTM_FixedClock'
      - clockSourceFreq: 'ClocksTool_DefaultInit'
      - timerPrescaler: '128'
      - timerOutputFrequency: '65536'
      - systemClockSource: 'BusInterfaceClock'
      - systemClockSourceFreq: 'ClocksTool_DefaultInit'
      - faultMode: 'kFTM_Fault_Disable'
      - inputFilterPeriod: '1'
      - faultInputs:
        - 0:
          - enableFaultInput: 'false'
          - faultLevelVal: 'low'
          - useFaultFilter: 'false'
        - 1:
          - enableFaultInput: 'false'
          - faultLevelVal: 'low'
          - useFaultFilter: 'false'
        - 2:
          - enableFaultInput: 'false'
          - faultLevelVal: 'low'
          - useFaultFilter: 'false'
        - 3:
          - enableFaultInput: 'false'
          - faultLevelVal: 'low'
          - useFaultFilter: 'false'
      - deadTimePrescale: 'kFTM_Deadtime_Prescale_1'
      - deadTimePeriod: '0'
      - pwmSyncMode: 'kFTM_SoftwareTrigger'
      - reloadPoints: ''
      - extTriggers: ''
      - chnlInitState: ''
      - chnlPolarity: ''
      - bdmMode: 'kFTM_BdmMode_0'
      - useGlobalTimeBase: 'false'
    - timer_interrupts: ''
    - enable_irq: 'false'
    - ftm_interrupt:
      - IRQn: 'FTM1_IRQn'
      - enable_interrrupt: 'enabled'
      - enable_priority: 'false'
      - priority: '0'
      - enable_custom_name: 'false'
    - EnableTimerInInit: 'true'
  - ftm_edge_aligned_mode:
    - ftm_edge_aligned_channels_config:
      - 0:
        - channelId: ''
        - edge_aligned_mode: 'kFTM_DualEdgeCapture'
        - dual_edge_capture:
          - chnNumber: 'kFTM_Chnl_0'
          - dual_edge_capture_param:
            - mode: 'kFTM_Continuous'
            - currChanEdgeMode: 'kFTM_FallingEdge'
            - nextChanEdgeMode: 'kFTM_FallingEdge'
          - inputFilterPeriod: '1'
          - enable_chan_irq: 'false'
          - enable_chan1_irq: 'false'
 * BE CAREFUL MODIFYING THIS COMMENT - IT IS YAML SETTINGS FOR TOOLS **********/
/* clang-format on */
const ftm_config_t FTM0_config = {
  .prescale = kFTM_Prescale_Divide_128,
  .faultMode = kFTM_Fault_Disable,
  .faultFilterValue = 0,
  .deadTimePrescale = kFTM_Deadtime_Prescale_1,
  .deadTimeValue = 0,
  .pwmSyncMode = kFTM_SoftwareTrigger,
  .reloadPoints = 0,
  .extTriggers = 0,
  .chnlInitState = 0,
  .chnlPolarity = 0,
  .bdmMode = kFTM_BdmMode_0,
  .useGlobalTimeBase = false
};
const ftm_dual_edge_capture_param_t FTM0_channel0 = {
  .mode = kFTM_Continuous,
  .currChanEdgeMode = kFTM_FallingEdge,
  .nextChanEdgeMode = kFTM_FallingEdge
};


static void FTM0_init(void) {
  FTM_Init(FTM0_PERIPHERAL, &FTM0_config);
  FTM_SetTimerPeriod(FTM0_PERIPHERAL, FTM0_TIMER_MODULO_VALUE);
  FTM_SetupDualEdgeCapture(FTM0_PERIPHERAL, kFTM_Chnl_0, &FTM0_channel0, 0);
  FTM_StartTimer(FTM0_PERIPHERAL, kFTM_FixedClock);
}

/***********************************************************************************************************************
 * PDB1 initialization code
 **********************************************************************************************************************/
/* clang-format off */
/* TEXT BELOW IS USED AS SETTING FOR TOOLS *************************************
instance:
- name: 'PDB1'
- type: 'pdb'
- mode: 'general'
- custom_name_enabled: 'false'
- type_id: 'pdb_32eb8756416d042c4a30e2cf9bd8fca4'
- functional_group: 'BOARD_InitPeripherals'
- peripheral: 'PDB1'
- config_sets:
  - fsl_pdb:
    - clockConfig:
      - clockSource: 'BusInterfaceClock'
      - clockSourceFreq: 'ClocksTool_DefaultInit'
    - pdb_config:
      - loadValueMode: 'kPDB_LoadValueImmediately'
      - firstDivider: 'kPDB_PrescalerDivider1'
      - secondDivider: 'kPDB_DividerMultiplicationFactor1'
      - moduloValue_str: '1680'
      - triggerInputSource: 'kPDB_TriggerInput0'
      - initSWtrigger: 'false'
      - enableContinuousMode: 'false'
    - pdb_adc_triggering_config:
      - 0:
        - pdb_adc_triggered_device: 'ADC0'
        - pdb_adc_pretriggers_config:
          - 0:
            - enable: 'true'
            - outputSource: 'delayedTrigger'
            - delayValue_str: '1'
    - pdb_dac_triggering_config: []
    - pdb_pulse_out_config: []
    - pdb_delay_interrupt_config:
      - actionAfterDelay: 'noAction'
      - delayValue_str: ''
    - pdb_interrupts_config:
      - interrupt_sel: ''
      - enable_irq: 'false'
      - interrupt:
        - IRQn: 'PDB1_IRQn'
        - enable_interrrupt: 'enabled'
        - enable_priority: 'false'
        - priority: '0'
        - enable_custom_name: 'false'
 * BE CAREFUL MODIFYING THIS COMMENT - IT IS YAML SETTINGS FOR TOOLS **********/
/* clang-format on */
/* PDB counter configuration */
const pdb_config_t PDB1_config = {
  .loadValueMode = kPDB_LoadValueImmediately,
  .prescalerDivider = kPDB_PrescalerDivider1,
  .dividerMultiplicationFactor = kPDB_DividerMultiplicationFactor1,
  .triggerInputSource = kPDB_TriggerInput0,
  .enableContinuousMode = false
};
/* PDB ADC0 pre-triggers configuration */
pdb_adc_pretrigger_config_t PDB1_ADC0_pretriggers_config = {
  .enablePreTriggerMask = 0U | (1U << kPDB_ADCPreTrigger0),
  .enableOutputMask = 0U | (1U << kPDB_ADCPreTrigger0),
  .enableBackToBackOperationMask = 0U
};
const uint32_t PDB1_ADC0_pretriggers_value[PDB1_ADC0_PRETRIGGERS_COUNT] = {
  1U
};

static void PDB1_init(void) {
  /* PDB counter initialization */
  PDB_Init(PDB1_PERIPHERAL, &PDB1_config);
  /* PDB counter modulo initialization */
  PDB_SetModulusValue(PDB1_PERIPHERAL, 1680U);
  /* PDB ADC0 pre-triggers initialization */
  PDB_SetADCPreTriggerConfig(PDB1_PERIPHERAL, kPDB_ADCTriggerChannel0, &PDB1_ADC0_pretriggers_config);
  PDB_SetADCPreTriggerDelayValue(PDB1_PERIPHERAL, kPDB_ADCTriggerChannel0, kPDB_ADCPreTrigger0, PDB1_ADC0_pretriggers_value[PDB1_ADC0_PT0]);
  /* Load buffered registers values into the working register for the first time */
  PDB_DoLoadValues(PDB1_PERIPHERAL);
}

/***********************************************************************************************************************
 * Initialization functions
 **********************************************************************************************************************/
static void BOARD_InitPeripherals_CommonPostInit(void)
{
  /* Interrupt vector PDB1_IRQn priority settings in the NVIC. */
  NVIC_SetPriority(PDB1_IRQN_IRQN, PDB1_IRQN_IRQ_PRIORITY);
  /* Enable interrupt PDB1_IRQn request in the NVIC. */
  EnableIRQ(PDB1_IRQN_IRQN);
}

void BOARD_InitPeripherals(void)
{
  /* Global initialization */
  DMAMUX_Init(DMA_DMAMUX_BASEADDR);
  EDMA_Init(DMA_DMA_BASEADDR, &DMA_config);

  /* Initialize components */
  DMA_init();
  CAN0_init();
  LPSPI0_init();
  FTM3_init();
  CAN1_init();
  FTM2_init();
  ADC1_init();
  LPSPI1_init();
  FTM0_init();
  PDB1_init();
  /* Common post-initialization */
  BOARD_InitPeripherals_CommonPostInit();
}

/***********************************************************************************************************************
 * BOARD_InitBootPeripherals function
 **********************************************************************************************************************/
void BOARD_InitBootPeripherals(void)
{
  BOARD_InitPeripherals();
}
